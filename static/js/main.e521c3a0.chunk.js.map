{"version":3,"sources":["media/firechart.png","components/SearchCouncil.js","components/FireRatingChart.js","components/Weather.js","components/Tweets.js","App.js","serviceWorker.js","index.js","media/airrow.png"],"names":["module","exports","councilAreas","SearchCouncil","state","districtName","districtNumber","handleChange","bind","getDistrictNumber","map","region","index","includes","setState","fireDistrict","event","target","value","this","props","setDistrictNumber","setDistrictName","areasOptions","flat","sort","area","key","onChange","Component","FireRatingChart","loading","regionName","regionNumber","fireDangerToday","fireBanToday","fireDangerTomorrow","fireBanTodayTomorrow","getDistrictName","xml2js","require","indexValue","fetch","proxyUrl","then","response","text","data","parseStringPromise","result","FireDangerMap","District","Name","RegionNumber","DangerLevelToday","FireBanToday","DangerLevelTomorrow","fireBanTomorrow","FireBanTomorrow","ratingsList","arrowDegree","warningBgColor","todaysWarning","rating","todaysRating","tomorrowsWarningColor","tomorrowsRating","cataWarningColor","mainWarningText","className","style","backgroundColor","color","animation","src","alt","height","transform","href","Weather","description","temperature","percipitation","humidity","windSpeed","windDirection","headers","json","console","log","observations","local_date_time","air_temp","rain_trace","rel_hum","wind_spd_kmh","wind_dir","Tweets","sourceType","screenName","options","width","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e521c3a0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/firechart.91714137.png\";","import React, {Component} from 'react';\n\nconst councilAreas = [\n  [\"Ballina\", \"Byron\", \"Clarence Valley\", \"Kyogle\", \"Lismore\", \"Richmond Valley\", \"Tweed\"],\n  [\"Bellingen\", \"Coffs Harbour\", \"Port Macquarie-Hastings\", \"Kempsey\", \"Nambucca\", \"Mid-Coast\"],\n  [\"Cessnock\", \"Dungog\", \"Lake Macquarie\", \"Maitland\", \"Muswellbrook\", \"Newcastle\", \"Port Stephens\", \"Singleton\", \"Upper Hunter\"],\n  [\"The Hills\", \"Blacktown\", \"Blue Mountains\", \"Burwood\", \"Camden\", \"Campbelltown\", \"Canada Bay\", \"Fairfield\", \"Hawkesbury\", \"Hornsby\", \"Hunters Hill\", \"Kogarah\", \"Ku-ring-gai\", \"Lane Cove\", \"Liverpool\", \"Mosman\", \"North Sydney\", \"Parramatta\", \"Penrith\", \"Randwick\", \"Ryde\", \"Strathfield\", \"Sutherland\", \"Sydney\", \"Waverley\", \"Willoughby\", \"Woollahra\", \"Bayside\", \"Canterbury-Bankstown\", \"Central Coast\", \"Cumberland\", \"Georges River\", \"Inner West\", \"Northern Beaches\"],\n  [\"Kiama\", \"Shellharbour\", \"Shoalhaven\", \"Wingecarribee\", \"Wollondilly\", \"Wollongong\"],\n  [\"Bega Valley\", \"Eurobodalla\"],\n  [\"Snowy Monaro\"],\n  [\"ACT\"],\n  [\"Goulburn Mulwaree\", \"Upper Lachlan\", \"Yass Valley\", \"Queanbeyan-Palerang\"],\n  [\"Bathurst\", \"Blayney\", \"Cabonne\", \"Cowra\", \"Lithgow\", \"Mid-Western\", \"Oberon\", \"Orange\"],\n  [\"Glen Innes Severn\", \"Tenterfield\", \"Uralla\", \"Walcha\", \"Armidale\"],\n  [\"Gunnedah\", \"Gwydir\", \"Inverell\", \"Liverpool Plains\", \"Tamworth\"],\n  [\"Moree Plains\", \"Narrabri\", \"Walgett\", \"Warrumbungle\"],\n  [\"Bogan\", \"Coonamble\", \"Gilgandra\", \"Warren\"],\n  [\"Bland\", \"Forbes\", \"Lachlan\", \"Narromine\", \"Parkes\", \"Temora\", \"Weddin\", \"Dubbo\"],\n  [\"Cootamundra-Gundagai\", \"Hilltops\", \"Snowy Valleys\"],\n  [\"Albury\", \"Coolamon\", \"Greater Hume\", \"Junee\", \"Lockhart\", \"Wagga Wagga\"],\n  [\"Berrigan\", \"Edward River\", \"Federation\", \"Murray River\", \"Murrumbidgee (Southern parts)\"],\n  [\"Carrathool\", \"Griffith\", \"Hay\", \"Leeton\", \"Narrandera\", \"Murrumbidgee (Northern parts)\"],\n  [\"Balranald\", \"Wentworth\"],\n  [\"Bourke\", \"Brewarrina\", \"Broken Hill\", \"Central Darling\", \"Cobar\"]\n];\n\nclass SearchCouncil extends Component {\n  constructor() {\n    super()\n    this.state = {\n      districtName: '',\n      districtNumber: null\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.getDistrictNumber = this.getDistrictNumber.bind(this);\n  }\n\n  getDistrictNumber(districtName) {\n    let districtNumber = null\n    councilAreas.map((region, index) => {\n    if (region.includes(districtName)) {\n     this.setState({fireDistrict: index});\n     districtNumber = index;\n    }\n    });\n    return districtNumber\n  }\n\n  handleChange(event) {\n    let districtName = event.target.value;\n\n    let districtNumber = this.getDistrictNumber(districtName);\n\n    // Here we are getting the District name and checking through the array of arrays to get the index value. this will be the value which will be required to be used in the data URL.\n\n    this.props.setDistrictNumber(districtNumber)\n    this.props.setDistrictName(districtName)\n\n    this.setState({districtName: districtName});\n  }\n\n\n  render(){\n    // Potentially could change the numbers to the the specific region name, so the developers can understand and use the key's index number as the value for the .json file .\n\n\n    // Creating a consolidated list of all the values of the council areas. flat consolidates it all together into a single array. This will be used to create a dynamic select menu.\n    const areasList = (councilAreas.flat()).sort();\n    const areasOptions = areasList.map((area) =>\n      <option key={area} value={area}>{area}</option>\n    );\n\n\n\n\n\n    return(\n      <select onChange={this.handleChange}>\n        <option value=\"select\">Select</option>\n        {areasOptions}\n      </select>\n    )}\n}\n\nexport default SearchCouncil\n","import React, {Component} from \"react\";\nimport SearchCouncil from '../components/SearchCouncil.js';\n\nclass FireRatingChart extends Component {\n    constructor() {\n      super()\n      this.state = {\n        loading: false,\n        regionName: \"\",\n        regionNumber: \"\",\n        fireDangerToday : \"\",\n        fireBanToday: \"\",\n        fireDangerTomorrow : \"\",\n        fireBanTodayTomorrow : \"\",\n        districtNumber: 0,\n        districtName: ''\n      }\n      this.getDistrictName = this.getDistrictName.bind(this)\n      this.getDistrictNumber = this.getDistrictNumber.bind(this)\n    }\n\n        getDistrictNumber(value) {\n          this.setState({districtNumber: value})\n        }\n\n        getDistrictName(value) {\n          this.setState({districtName: value})\n        }\n\n\n/* The datafile was in XML, so had to be converted to JSON. I used NPM xml2js for this. Also the datafile had a cors issue, which was overcome using the proxyURL! So here the data is received as text, and then converted to json. */\n    componentDidUpdate() {\n      var xml2js = require('xml2js');\n      var proxyUrl = 'https://cors-anywhere.herokuapp.com/';\n      var targetUrl = 'http://www.rfs.nsw.gov.au/feeds/fdrToban.xml';\n      var indexValue = this.state.districtNumber;\n\n      // this.setState({loading: true})\n      fetch(proxyUrl + targetUrl)\n        .then(response => response.text())\n        .then(data => xml2js.parseStringPromise(data))\n        .then(result => {\n            this.setState({\n              loading: false,\n              regionName: result.FireDangerMap.District[indexValue].Name[0],\n              regionNumber: result.FireDangerMap.District[indexValue].RegionNumber[0],\n              fireDangerToday: result.FireDangerMap.District[indexValue].DangerLevelToday[0],\n              fireBanToday: result.FireDangerMap.District[indexValue].FireBanToday[0],\n              fireDangerTomorrow: result.FireDangerMap.District[indexValue].DangerLevelTomorrow[0],\n              fireBanTomorrow: result.FireDangerMap.District[indexValue].FireBanTomorrow[0],\n            })\n          })\n    }\n\n    render(){\n\n      const ratingsList = {\n        \"LOW MODERATE\": [-75, \"#17a462\"],\n        \"HIGH\": [-45, \"#00adef\"],\n        \"VERY HIGH\": [-15, \"#ffd600\"],\n        \"SEVERE\": [15, \"#fd9e1d\"],\n        \"EXTREME\": [45, \"#e5281b\"],\n        \"CATASTROPHIC\": [75, \"#e5281b\"]\n      }\n\n      let arrowDegree = \"\";\n      let warningBgColor = \"\";\n      let todaysWarning = \"\";\n\n      function todaysRating(rating) {\n        for (let key in ratingsList) {\n          if (key === rating) {\n            todaysWarning = rating;\n            arrowDegree = ratingsList[key][0];\n            warningBgColor = ratingsList[key][1];\n          }\n        }\n      }\n      todaysRating(this.state.fireDangerToday);\n\n      let tomorrowsWarningColor = \"\";\n      function tomorrowsRating(rating) {\n        for (let key in ratingsList) {\n          if (key === rating) {\n            tomorrowsWarningColor = ratingsList[key][1];\n          }\n        }\n      }\n      tomorrowsRating(this.state.fireDangerTomorrow);\n\n\n      const cataWarningColor = todaysWarning === \"CATASTROPHIC\" ? \"white\" : null;\n      const mainWarningText = this.state.loading ? \"loading...\" : <span className=\"warningText\" style={{backgroundColor: warningBgColor, color: cataWarningColor }}> {todaysWarning} </span>;\n      const animation = this.state.loading ? <img src={require(\"../media/airrow.png\")} alt=\"Fire Rating Arrow\" height=\"120px\" className=\"chartArrow\" style={{transform:`rotate(0deg)`}}/> : <img src={require(\"../media/airrow.png\")} alt=\"Fire Rating Arrow\" height=\"120px\" className=\"chartArrow\" style={{transform:`rotate(${arrowDegree}deg)`, animation: `arrowMovement 2s`}}/>;\n\n      return(\n        <div>\n          <h1>Today's Fire Danger Rating For < SearchCouncil setDistrictNumber={this.getDistrictNumber} setDistrictName={this.getDistrictName}/>: {mainWarningText}</h1>\n          <div className=\"parent\">\n            <img src={require(\"../media/firechart.png\")} alt=\"fire ratings chart\" className=\"fireChart\" height=\"220px\"/>\n            {animation}\n\n            <p><span className=\"textBold\">Region Name:</span> {this.state.regionName}</p>\n            <p><span className=\"textBold\">Region Number:</span>  {this.state.regionNumber} (For RFS fire map reference)</p>\n            <p><span className=\"textBold\">Total Fire Ban Today?:</span>  {this.state.fireBanToday}</p>\n            <span>_______________</span>\n\n            <p><span className=\"textBold\">Fire Danger Rating for Tomorrow:</span> <span className=\"warningText textBold\" style={{backgroundColor: tomorrowsWarningColor, color: cataWarningColor }}>{this.state.fireDangerTomorrow}</span></p>\n            <p><span className=\"textBold\">Total Fire Ban Tomorrow?:</span> {this.state.fireBanTomorrow}</p>\n            <br />\n\n            <h4>You can confirm the data on the official RFS site - <a href=\"https://www.rfs.nsw.gov.au/fire-information/fdr-and-tobans\" target=\"_blank\">here!</a></h4>\n          </div>\n        </div>\n      )\n      }\n    }\n\nexport default FireRatingChart\n","import React, {Component} from 'react';\n\nclass Weather extends Component {\n  constructor(){\n    super()\n    this.state = {\n      description: \"\",\n      temperature : \"\",\n      percipitation: \"\",\n      humidity: \"\",\n      windSpeed: \"\",\n      windDirection: \"\"\n    }\n\n  }\n\n  componentDidMount(){\n    var proxyUrl = 'https://cors-anywhere.herokuapp.com/';\n    var targetUrl = 'http://reg.bom.gov.au/fwo/IDN60901/IDN60901.94757.json';\n\n    fetch((proxyUrl + targetUrl), {\n      headers : {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n      }\n    })\n      .then(result => result.json())\n      .then(data => {\n        console.log(data)\n        this.setState({\n          description: data.observations.data[0].local_date_time,\n          temperature : data.observations.data[0].air_temp,\n          percipitation: data.observations.data[0].rain_trace,\n          humidity: data.observations.data[0].rel_hum,\n          windSpeed: data.observations.data[0].wind_spd_kmh,\n          windDirection: data.observations.data[0].wind_dir\n        });\n      })\n  }\n\n  render(){\n    return(\n      <div>\n        <h1>Weather in Campbelltown</h1>\n        <p><span className=\"textBold\">Last Updated:</span> {this.state.description}</p>\n        <p><span className=\"textBold\">Temperature:</span> {this.state.temperature}℃</p>\n        <p><span className=\"textBold\">Percipitation: </span> {this.state.percipitation}%</p>\n        <p><span className=\"textBold\">Humidity: </span> {this.state.humidity}%</p>\n        <p><span className=\"textBold\">Wind: </span> {this.state.windSpeed} km/h</p>\n        <p><span className=\"textBold\">Wind Direction: </span> {this.state.windDirection}</p>\n\n        <h4>You can confirm the data on the official BoM site - <a href=\"http://www.bom.gov.au/products/IDN60801/IDN60801.94757.shtml\" target=\"_blank\">here!</a></h4>\n      </div>\n    )\n  }\n}\n\nexport default Weather\n","import React, {Component} from 'react';\nimport {TwitterTimelineEmbed} from 'react-twitter-embed';\n\nclass Tweets extends Component {\n  render(){\n    return(\n    <div>\n      <TwitterTimelineEmbed\n       sourceType=\"profile\"\n       screenName=\"NSWRFS\"\n       options={{\n         height: \"500\",\n         width: \"40%\",\n       }}\n     />\n    </div>\n  )}\n}\n\nexport default Tweets\n","import React, {Component} from 'react'\nimport './App.css'\nimport FireChart from './components/FireRatingChart'\nimport Weather from './components/Weather'\nimport Tweets from './components/Tweets'\n\nclass App extends Component {\n\n\n  render(){\n    return(\n      <div>\n        < FireChart />\n        <br />\n        < Weather />\n        <br />\n        < Tweets />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/airrow.ea7cc9d7.png\";"],"sourceRoot":""}